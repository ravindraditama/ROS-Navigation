<launch>
		<!-- Load robot description and start state publisher-->
    <param name="robot_description" textfile="$(find gbot_core)/urdf/head_2d.urdf" />

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

	<node name="serial_node" pkg="rosserial_python" type="serial_node.py">
		<param name="port" value="/dev/ttyACM0"/>
	</node>

	<node name="nox_controller" pkg="nox" type="nox_controller">
		<param name="publish_tf" value="true" />
    		<param name="publish_rate" value="10.0" />
    		<param name="linear_scale_positive" value="1.025" />
    		<param name="linear_scale_negative" value="1.025" />
    		<param name="angular_scale_positive" value="1.078" />
    		<param name="angular_scale_negative" value="1.078" />
		<param name="angular_scale_accel" value="0.0" />
	</node>	
		
		<!-- Start RPLIDAR sensor node which provides LaserScan data  -->
    <node name="rplidarNode" pkg="rplidar_ros" type="rplidarNode" output="screen">
        <param name="serial_port" type="string" value="/dev/ttyUSB0"/>
        <param name="serial_baudrate" type="int" value="115200"/>
        <param name="frame_id" type="string" value="laser"/>
        <param name="inverted" type="bool" value="false"/>
        <param name="angle_compensate" type="bool" value="true"/>
	<param name="scan_mode" type="string" value="Boost"/>
    </node>
		
		<!-- Start Google Cartographer node with custom configuration file-->
    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
          -configuration_directory
              $(find gbot_core)/configuration_files
          -configuration_basename gbot_lidar_2d.lua" output="screen">
    </node>

		<!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
    
</launch>
